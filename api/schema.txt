# USER TABLE
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone_number VARCHAR(20) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_login TIMESTAMP,
    phone_verified BOOLEAN DEFAULT FALSE,
    preferences JSONB, -- Stores user preferences as a JSON object
    subscription_plan_id INT, -- Nullable; foreign key to Subscription Plans Table
    CONSTRAINT fk_subscription_plan
        FOREIGN KEY (subscription_plan_id) REFERENCES subscription_plans(subscription_plan_id) ON DELETE SET NULL
);




# AGENCIES TABLE
CREATE TABLE agencies (
    agency_id SERIAL PRIMARY KEY,
    agency_name VARCHAR(255) NOT NULL,
    access_code VARCHAR(50) UNIQUE NOT NULL,
    subscription_plan_id INT NOT NULL, -- Required for all agencies
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_subscription_plan
        FOREIGN KEY (subscription_plan_id) REFERENCES subscription_plans(subscription_plan_id) ON DELETE SET NULL
);



# AGENCY EMPLOYEES
CREATE TABLE agency_employees (
    employee_id SERIAL PRIMARY KEY,
    agency_id INT NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_login TIMESTAMP,
    email_verified BOOLEAN DEFAULT FALSE,
    phone_number VARCHAR(20) UNIQUE NOT NULL,
    phone_verified BOOLEAN DEFAULT FALSE,
    role VARCHAR(50), -- Example: 'agent', 'manager'
    CONSTRAINT fk_agency
        FOREIGN KEY (agency_id) REFERENCES agencies(agency_id)
);

# PROPERTIES TABLE 
CREATE TABLE properties (
    property_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    agency_id INT REFERENCES agencies(agency_id), -- Nullable, used if managed by an agency
    property_type VARCHAR(50) NOT NULL, -- Example: short_term_rent, long_term_rent, for_sale, land_rent, land_sale
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    price DECIMAL(10, 2) NOT NULL, -- Total price of the property
    area DECIMAL(10, 2) NOT NULL, -- Size of the property in square meters
    price_per_meter DECIMAL(10, 2) GENERATED ALWAYS AS (price / area) STORED NOT NULL, -- Calculated field for price per square meter
    location VARCHAR(255) NOT NULL, -- Could be a formatted address
    coordinates POINT NOT NULL, -- Geographic coordinates (latitude, longitude)
    listing_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(50), -- Example: available, pending, sold/rented
    contact_information TEXT, -- If different from user info
    property_images TEXT[] NOT NULL, -- Array of image URLs
    property_videos TEXT[], -- Array of video URLs, max 3
    is_featured BOOLEAN DEFAULT FALSE,
    featured_until TIMESTAMP,

    -- Common Fields for Residential Properties
    bedrooms INT, -- For residential properties, NULL for lands
    bathrooms INT, -- For residential properties, NULL for lands
    has_water BOOLEAN DEFAULT FALSE,
    has_electricity BOOLEAN DEFAULT FALSE,
    has_sewage BOOLEAN DEFAULT FALSE,
    direction VARCHAR(10), -- Example: North, South, East, West

    -- Type-Specific Fields
    floors INT, -- Applicable to House, Apartment, Office, Tower
    living_rooms INT, -- Applicable to House, Apartment, Farmhouse, Chalet, etc.
    rooms INT, -- Applicable to Apartment, Tower
    floor_number INT, -- Applicable to Apartment
    number_of_streets INT, -- Applicable to Land
    foot_traffic VARCHAR(10), -- Applicable to Shop (High, Medium, Low)
    proximity VARCHAR(50), -- Applicable to Shop (Near Main Road, Far from Main Road)
    parking_spaces INT, -- Applicable to Office
    number_of_gates INT, -- Applicable to Warehouse
    loading_docks INT, -- Applicable to Warehouse
    storage_capacity DECIMAL(10, 2), -- Applicable to Warehouse (in mÂ³)
    number_of_units INT, -- Applicable to Tower

    -- Additional Fields
    property_features JSONB, -- Flexible storage for different property features
    ad_id SERIAL UNIQUE, -- Unique ad identifier, different from property_id
    ad_license_number VARCHAR(100), -- Real Estate Authority Info
    unified_number_of_establishment VARCHAR(100), -- Real Estate Authority Info
    fal_license_number VARCHAR(100), -- Real Estate Authority Info
    fal_registration_date TIMESTAMP, -- Real Estate Authority Info
    advertiser_info JSONB, -- Stores advertiser information (user/employee id, name, type, etc.)
    similar_properties JSONB, -- Stores references to similar properties

    -- Removed 'specific_details' as fields are now directly included
    -- specific_details JSONB,

    CONSTRAINT chk_property_videos CHECK (array_length(property_videos, 1) <= 3) -- Ensures max 3 videos
);


# PAYMENTS TABLE 
CREATE TABLE payments (
    payment_id SERIAL PRIMARY KEY,
    user_id INT NOT NULL REFERENCES users(user_id),
    property_id INT REFERENCES properties(property_id), -- Nullable; only if the payment is for a listing or feature
    amount DECIMAL(10, 2) NOT NULL, -- Payment amount
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Date of payment
    payment_type VARCHAR(50) NOT NULL, -- Example: 'subscription', 'feature', 'listing'
    featured_until TIMESTAMP, -- Nullable; used if payment_type is 'feature'
    payment_status VARCHAR(50) NOT NULL, -- Example: 'completed', 'pending', 'failed'
    listing_period INTERVAL, -- Optional; the period for which a property is listed if payment_type is 'listing'
    CONSTRAINT chk_payment_type CHECK (payment_type IN ('subscription', 'feature', 'listing')) -- Ensure valid payment types
);

# CARD PAYMENT DETAILS
CREATE TABLE card_details (
    card_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id),
    card_number_last4 VARCHAR(4) NOT NULL, -- Only store the last 4 digits of the card number
    card_token VARCHAR(255) NOT NULL, -- Token from payment gateway instead of the full card number
    cardholder_name VARCHAR(255) NOT NULL,
    expiry_date VARCHAR(5) NOT NULL, -- Format: MM/YY
    card_type VARCHAR(50), -- Example: Visa, MasterCard
    billing_address TEXT, -- Consider encrypting this field
    added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_default BOOLEAN DEFAULT FALSE, -- Indicates if this is the default card for the user
    CONSTRAINT chk_expiry_date_format CHECK (expiry_date ~ '^[0-9]{2}/[0-9]{2}$') -- Ensures MM/YY format
);

# AMENTIES
CREATE TABLE amenities (
    amenity_id SERIAL PRIMARY KEY,
    amenity_name VARCHAR(255) UNIQUE NOT NULL -- Examples: 'Pool', 'Gym', 'Parking', etc.
);

# PROPERTY AMENTIES
CREATE TABLE property_amenities (
    property_amenity_id SERIAL PRIMARY KEY,
    property_id INT REFERENCES properties(property_id) ON DELETE CASCADE, -- If a property is deleted, remove associated amenities
    amenity_id INT REFERENCES amenities(amenity_id) ON DELETE CASCADE -- Ensures amenity integrity
);

# SAVED PROPERTIES
CREATE TABLE saved_properties (
    saved_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
    property_id INT REFERENCES properties(property_id) ON DELETE CASCADE,
    saved_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT unique_user_property_pair UNIQUE (user_id, property_id) -- Prevents duplicate saves
);

# USER ACTIONS TABLE 
CREATE TABLE user_actions (
    action_id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(user_id) ON DELETE CASCADE, -- Ensure actions are removed if a user is deleted
    session_id UUID NOT NULL, -- Unique identifier for user session
    action_type VARCHAR(50) NOT NULL, -- Examples: 'login', 'logout', 'view_property', 'save_property', 'list_property', 'feature_property', 'update_profile', 'subscribe'
    action_details JSONB, -- Stores additional details about the action (e.g., property ID, changes made, etc.)
    action_start TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Start time of the action
    action_end TIMESTAMP, -- End time of the action, useful for duration tracking
    device_type VARCHAR(50), -- Example: 'mobile', 'tablet'
    operating_system VARCHAR(50), -- Example: 'iOS', 'Android'
    ip_address INET, -- User's IP address for location tracking
    error_message TEXT, -- Captures any errors or exceptions during the action
    geo_location POINT, -- Latitude and longitude of user (if available)
    user_agent TEXT, -- Stores the full user-agent string for detailed device information
    CONSTRAINT chk_action_type CHECK (action_type IN ('login', 'logout', 'view_property', 'save_property', 'list_property', 'feature_property', 'update_profile', 'subscribe', 'delete_property', 'search', 'filter', 'contact_seller', 'request_info')) -- Ensures valid action types
);


# PROPERTY VIEW
CREATE TABLE property_views (
    view_id SERIAL PRIMARY KEY,
    property_id INT REFERENCES properties(property_id),
    user_id INT REFERENCES users(user_id),
    view_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    duration_seconds INT, -- Time spent on the property page in seconds
    geo_location POINT -- Latitude and longitude of user (if available)
);


# PROPERTY SHARES
CREATE TABLE property_shares (
    share_id SERIAL PRIMARY KEY,
    property_id INT REFERENCES properties(property_id),
    user_id INT REFERENCES users(user_id),
    share_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    platform VARCHAR(50) -- Platform where the property was shared, e.g., 'WhatsApp', 'Facebook'
);

# PROPERTY CLICKS
CREATE TABLE property_clicks (
    click_id SERIAL PRIMARY KEY,
    property_id INT REFERENCES properties(property_id),
    user_id INT REFERENCES users(user_id),
    click_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    click_type VARCHAR(50) -- Type of click, e.g., 'contact_button', 'gallery_image'
);

# PROPERTY INQUIRES
CREATE TABLE property_inquiries (
    inquiry_id SERIAL PRIMARY KEY,
    property_id INT REFERENCES properties(property_id),
    user_id INT REFERENCES users(user_id),
    inquiry_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    inquiry_type VARCHAR(50), -- Type of inquiry, e.g., 'email', 'phone_call'
    inquiry_details TEXT -- Additional details about the inquiry
);

# PROPERTY ANALYTICS
CREATE VIEW property_analytics AS
SELECT 
    p.property_id,
    p.title,
    p.user_id,
    p.agency_id,
    COUNT(DISTINCT v.view_id) AS total_views,
    COUNT(DISTINCT s.saved_id) AS total_saves,
    COUNT(DISTINCT pay.payment_id) AS total_payments,
    COUNT(DISTINCT sh.share_id) AS total_shares,
    COUNT(DISTINCT cl.click_id) AS total_clicks,
    AVG(v.duration_seconds) AS avg_time_spent, -- Average time spent on the property page
    COUNT(DISTINCT iq.inquiry_id) AS total_inquiries,
    ARRAY_AGG(DISTINCT v.geo_location) AS viewer_locations -- Aggregate user locations into an array
FROM 
    properties p
LEFT JOIN 
    property_views v ON p.property_id = v.property_id
LEFT JOIN 
    saved_properties s ON p.property_id = s.property_id
LEFT JOIN 
    payments pay ON p.property_id = pay.property_id
LEFT JOIN 
    property_shares sh ON p.property_id = sh.property_id
LEFT JOIN 
    property_clicks cl ON p.property_id = cl.property_id
LEFT JOIN 
    property_inquiries iq ON p.property_id = iq.property_id
GROUP BY 
    p.property_id, p.title, p.user_id, p.agency_id;


# USER ANALYTICS
CREATE TABLE user_analytics (
    analytics_id SERIAL PRIMARY KEY,
    total_users INT NOT NULL, -- Total number of registered users
    active_users_daily INT NOT NULL, -- Number of active users in the last 24 hours
    active_users_weekly INT NOT NULL, -- Number of active users in the last 7 days
    active_users_monthly INT NOT NULL, -- Number of active users in the last 30 days
    new_users_daily INT NOT NULL, -- Number of new users registered in the last 24 hours
    new_users_weekly INT NOT NULL, -- Number of new users registered in the last 7 days
    new_users_monthly INT NOT NULL, -- Number of new users registered in the last 30 days
    retention_rate_1d DECIMAL(5, 2) DEFAULT NULL, -- 1-day retention rate (percentage)
    retention_rate_7d DECIMAL(5, 2) DEFAULT NULL, -- 7-day retention rate (percentage)
    retention_rate_30d DECIMAL(5, 2) DEFAULT NULL, -- 30-day retention rate (percentage)
    churn_rate DECIMAL(5, 2) DEFAULT NULL, -- Churn rate (percentage)
    average_session_duration INTERVAL DEFAULT NULL, -- Average session duration
    average_session_frequency DECIMAL(5, 2) DEFAULT NULL, -- Average number of sessions per user per period
    average_actions_per_user DECIMAL(5, 2) DEFAULT NULL, -- Average number of actions per user
    total_logins INT NOT NULL, -- Total number of logins
    total_property_views INT NOT NULL, -- Total number of property views
    total_property_saves INT NOT NULL, -- Total number of property saves
    total_property_inquiries INT NOT NULL, -- Total number of property inquiries
    geo_distribution JSONB DEFAULT NULL, -- Geographic distribution of users
    device_distribution JSONB DEFAULT NULL, -- Device type distribution of users (e.g., mobile, desktop)
    top_actions JSONB DEFAULT NULL, -- JSON object with counts of top actions performed by users
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Last updated time for analytics data
);

# SUBCRIPTION PLAN TABLES
CREATE TABLE subscription_plans (
    plan_id SERIAL PRIMARY KEY,
    plan_name VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    property_limit INT, -- Number of properties allowed, NULL for unlimited
    plan_duration INT NOT NULL, -- Duration of the plan in days
    max_users INT DEFAULT NULL -- Optional, max users allowed (useful for agency plans)
);

# SUBSCRIPTION TABLES
CREATE TABLE subscriptions (
    subscription_id SERIAL PRIMARY KEY,
    subscriber_id INT NOT NULL, -- ID of the user or agency
    subscriber_type VARCHAR(50) NOT NULL CHECK (subscriber_type IN ('user', 'agency')), -- Identifies if it's a user or an agency
    plan_id INT REFERENCES subscription_plans(plan_id) ON DELETE CASCADE, -- Link to the subscription plan
    start_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    end_date TIMESTAMP NOT NULL,
    status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'expired', 'canceled')), -- Tracks status of the subscription
    auto_renew BOOLEAN DEFAULT TRUE, -- Indicates if the subscription is set to auto-renew
    payment_id INT REFERENCES payments(payment_id) ON DELETE SET NULL -- Optional link to the payments table
);

# PROPERTY OWNERSHIP TABLES
CREATE TABLE property_ownership_details (
    ownership_id SERIAL PRIMARY KEY,
    property_id INT NOT NULL REFERENCES properties(property_id) ON DELETE CASCADE,
    ownership_type VARCHAR(50) NOT NULL CHECK (ownership_type IN ('single_owned', 'multiple_owners', 'company_owned')), -- Ownership type
    instrument_number VARCHAR(100) NOT NULL, -- Common to all ownership types
    national_id VARCHAR(50), -- Nullable; required for 'single_owned' and 'multiple_owners'
    agent_national_id VARCHAR(50), -- Nullable; required for 'multiple_owners' and 'company_owned'
    authorization_number VARCHAR(100), -- Nullable; required for 'multiple_owners' and 'company_owned'
    dob DATE, -- Date of birth; required for 'single_owned' and for the agent in 'multiple_owners' and 'company_owned'
    commercial_registration_number VARCHAR(100), -- Nullable; required for 'company_owned'
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp for record creation
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP -- Timestamp for last update
);